######################
# Renombrar columnas #
######################
colnames(datos) <- readxl::read_excel("Datos_LP.xlsx",
col_names = FALSE,
range = "D3:DN3",
)
######################
# Renombrar columnas #
######################
tincho <- readxl::read_excel("Datos_LP.xlsx",
col_names = FALSE,
range = "D3:DN3",
)
colnames(datos) <- tincho
str(tincho)
######################
# Renombrar columnas #
######################
tincho <- readxl::read_excel("Datos_LP.xlsx",
col_names = FALSE,
na = "",
range = "D3:DN3",
)
colnames(datos) <- tincho
str(tincho)
######################
# Renombrar columnas #
######################
tincho <- readxl::read_excel("Datos_LP.xlsx",
col_names = FALSE,
na = " ",
range = "D3:DN3",
)
colnames(datos) <- tincho
str(tincho)
######################
# Renombrar columnas #
######################
tincho <- readxl::read_excel("Datos_LP.xlsx",
col_names = FALSE,
trim_ws = TRUE,
range = "D3:DN3",
)
colnames(datos) <- tincho
str(tincho)
######################
# Renombrar columnas #
######################
tincho <- readxl::read_excel("Datos_LP.xlsx",
col_names = FALSE,
trim_ws = TRUE,
range = "D3:DN3",
)
colnames(datos) <- tincho
str(colnames(datos))
###################
# Modificar datos #
###################
datos_limpios <- datos %>% # Los pipelines permiten encadenar acciones
mutate(   # Para crear nuevas variables y editar las ya existentes
# Veo valores min y max de la variable para elegir una
# particion en intervalos apropiada
# min(altura)
# max(altura)
# sqrt(nrow(datos))
# Creo una variable nueva, con la partición en intervalos de altura
altura_int = cut(altura,
breaks = seq(from=0, to=50, by = 5),
right = F),
# Modifico las columnas de la variable de respuesta múltiple
# para dejarlas como indicadoras con valores 1 (en caso de presentar
# el atributo) y 0 (en caso de no presentarlo)
atracnosis = ifelse( atracnosis == "atracnosis", 1, 0 ),
roya = ifelse( roya == "roya", 1, 0 ),
manchas = ifelse( manchas == "manchas", 1, 0 ),
ampollas = ifelse( ampollas == "ampollas", 1, 0),
# Notar que los NA no entran dentro de la categoría "no presentar
# el atributo", por lo que requieren un tratamiento particular:
atracnosis = ifelse(is.na(atracnosis), 0, 1),
roya = ifelse(is.na(roya), 0, 1),
manchas = ifelse(is.na(manchas), 0, 1),
ampollas = ifelse(is.na(ampollas), 0, 1),
# Esto solo es correcto porque teníamos dos valores posibles en estas
# columnas: presencia de atributo (nombre de la plaga) y ausencia (NA).
# En los casos en los que se presenten ambas categorías además del NA
# correspondería trabajarlos como tres valores distintos (presencia,
# ausencia y faltante) y su tratamiento dependerá de lo que se desee hacer
# Para condiciones ifelse múltiples puedo usar la función case_when
inclinacion_cate = case_when(inclinacion == 0 ~ "Sin inclinación",
inclinacion < 15 ~ "Inclinación leve",
inclinacion < 30 ~ "Inclinación moderada",
TRUE ~ "Inclinación alta"),
# Recodifico las etiquetas de una variable categórica
especie = recode(especie, "ala" = "Álamo",
"casu" = "Casuarina",
"euca" = "Eucalipto",
"jaca" = "Jacarandá",
"palo"  = "Palo borracho"),
# Especifico ordinalidad a las categorías de una variable
tiempo = factor(tiempo,
levels = 1:5,
labels = c("Menos de 2 años", "Entre 2 y 5 años",
"Entre 5 y 10 años", "Entre 10 y 20 años",
"20 años o más"))
)
# Cargo los paquetes que voy a usar
library(tidyverse)
# Fijo el dataset
attach(datos)
######################
# Renombrar columnas #
######################
tincho <- readxl::read_excel("Datos_LP.xlsx",
col_names = FALSE,
trim_ws = TRUE,
range = "D3:DN3",
)
colnames(datos) <- tincho
str(colnames(datos))
###################
# Modificar datos #
###################
datos_limpios <- datos %>% # Los pipelines permiten encadenar acciones
mutate(   # Para crear nuevas variables y editar las ya existentes
# Veo valores min y max de la variable para elegir una
# particion en intervalos apropiada
# min(altura)
# max(altura)
# sqrt(nrow(datos))
# Creo una variable nueva, con la partición en intervalos de altura
altura_int = cut(altura,
breaks = seq(from=0, to=50, by = 5),
right = F),
# Modifico las columnas de la variable de respuesta múltiple
# para dejarlas como indicadoras con valores 1 (en caso de presentar
# el atributo) y 0 (en caso de no presentarlo)
atracnosis = ifelse( atracnosis == "atracnosis", 1, 0 ),
roya = ifelse( roya == "roya", 1, 0 ),
manchas = ifelse( manchas == "manchas", 1, 0 ),
ampollas = ifelse( ampollas == "ampollas", 1, 0),
# Notar que los NA no entran dentro de la categoría "no presentar
# el atributo", por lo que requieren un tratamiento particular:
atracnosis = ifelse(is.na(atracnosis), 0, 1),
roya = ifelse(is.na(roya), 0, 1),
manchas = ifelse(is.na(manchas), 0, 1),
ampollas = ifelse(is.na(ampollas), 0, 1),
# Esto solo es correcto porque teníamos dos valores posibles en estas
# columnas: presencia de atributo (nombre de la plaga) y ausencia (NA).
# En los casos en los que se presenten ambas categorías además del NA
# correspondería trabajarlos como tres valores distintos (presencia,
# ausencia y faltante) y su tratamiento dependerá de lo que se desee hacer
# Para condiciones ifelse múltiples puedo usar la función case_when
inclinacion_cate = case_when(inclinacion == 0 ~ "Sin inclinación",
inclinacion < 15 ~ "Inclinación leve",
inclinacion < 30 ~ "Inclinación moderada",
TRUE ~ "Inclinación alta"),
# Recodifico las etiquetas de una variable categórica
especie = recode(especie, "ala" = "Álamo",
"casu" = "Casuarina",
"euca" = "Eucalipto",
"jaca" = "Jacarandá",
"palo"  = "Palo borracho"),
# Especifico ordinalidad a las categorías de una variable
tiempo = factor(tiempo,
levels = 1:5,
labels = c("Menos de 2 años", "Entre 2 y 5 años",
"Entre 5 y 10 años", "Entre 10 y 20 años",
"20 años o más"))
)
######################
# Renombrar columnas #
######################
tincho <- readxl::read_excel("Datos_LP.xlsx",
col_names = FALSE,
trim_ws = TRUE,
range = "D3:DN3",
)
colnames(datos) <- tincho
str(colnames(datos))
# Fijo el dataset
attach(datos)
######################
# Renombrar columnas #
######################
tincho <- readxl::read_excel("Datos_LP.xlsx",
col_names = FALSE,
na = "NA",
trim_ws = TRUE,
range = "D3:DN3",
)
colnames(datos) <- tincho
str(tincho)
# Fijo el dataset
attach(datos)
######################
# Renombrar columnas #
######################
tincho <- readxl::read_excel("Datos_LP.xlsx",
col_names = FALSE,
na = "NA",
range = "D3:DN3",
)
colnames(datos) <- tincho
str(tincho)
######################
# Renombrar columnas #
######################
tincho <- readxl::read_excel("Datos_LP.xlsx",
col_names = FALSE,
na = "NA",
range = "D3:DN3",
)
colnames(datos) <- tincho
str(tincho)
###################
# Modificar datos #
###################
datos_limpios <- datos %>% # Los pipelines permiten encadenar acciones
mutate(   # Para crear nuevas variables y editar las ya existentes
# Veo valores min y max de la variable para elegir una
# particion en intervalos apropiada
# min(altura)
# max(altura)
# sqrt(nrow(datos))
# Creo una variable nueva, con la partición en intervalos de altura
altura_int = cut(altura,
breaks = seq(from=0, to=50, by = 5),
right = F),
# Modifico las columnas de la variable de respuesta múltiple
# para dejarlas como indicadoras con valores 1 (en caso de presentar
# el atributo) y 0 (en caso de no presentarlo)
atracnosis = ifelse( atracnosis == "atracnosis", 1, 0 ),
roya = ifelse( roya == "roya", 1, 0 ),
manchas = ifelse( manchas == "manchas", 1, 0 ),
ampollas = ifelse( ampollas == "ampollas", 1, 0),
# Notar que los NA no entran dentro de la categoría "no presentar
# el atributo", por lo que requieren un tratamiento particular:
atracnosis = ifelse(is.na(atracnosis), 0, 1),
roya = ifelse(is.na(roya), 0, 1),
manchas = ifelse(is.na(manchas), 0, 1),
ampollas = ifelse(is.na(ampollas), 0, 1),
# Esto solo es correcto porque teníamos dos valores posibles en estas
# columnas: presencia de atributo (nombre de la plaga) y ausencia (NA).
# En los casos en los que se presenten ambas categorías además del NA
# correspondería trabajarlos como tres valores distintos (presencia,
# ausencia y faltante) y su tratamiento dependerá de lo que se desee hacer
# Para condiciones ifelse múltiples puedo usar la función case_when
inclinacion_cate = case_when(inclinacion == 0 ~ "Sin inclinación",
inclinacion < 15 ~ "Inclinación leve",
inclinacion < 30 ~ "Inclinación moderada",
TRUE ~ "Inclinación alta"),
# Recodifico las etiquetas de una variable categórica
especie = recode(especie, "ala" = "Álamo",
"casu" = "Casuarina",
"euca" = "Eucalipto",
"jaca" = "Jacarandá",
"palo"  = "Palo borracho"),
# Especifico ordinalidad a las categorías de una variable
tiempo = factor(tiempo,
levels = 1:5,
labels = c("Menos de 2 años", "Entre 2 y 5 años",
"Entre 5 y 10 años", "Entre 10 y 20 años",
"20 años o más"))
)
######################
# Renombrar columnas #
######################
tincho <- readxl::read_excel("Datos_LP.xlsx",
col_names = FALSE,
na = "NA",
range = "D3:DN3",
)
colnames(datos) <- tincho
na.omit(tincho)
str(tincho)
######################
# Renombrar columnas #
######################
tincho <- readxl::read_excel("Datos_LP.xlsx",
col_names = FALSE,
na = "NA",
range = "D3:DN3",
)
colnames(datos) <- tincho
tincho <- na.omit(tincho)
str(tincho)
# Cargo los paquetes que voy a usar
library(tidyverse)
# Fijo el dataset
attach(datos)
# Cargo los paquetes que voy a usar
library(tidyverse)
# Fijo el dataset
attach(datos)
######################
# Renombrar columnas #
######################
# Lee los datos
tincho <- readxl::read_excel("Datos_LP.xlsx",
col_names = FALSE,
na = "NA",
range = "D3:DN3")
# Limpia NA en los nombres (reemplazándolos con "col_X")
nombres_columnas <- ifelse(is.na(tincho),
paste0("col_", seq_along(tincho)),
tincho)
# Asigna los nombres limpios
colnames(datos) <- nombres_columnas
str(tincho)
######################
# Renombrar columnas #
######################
# Lee los datos
tincho <- readxl::read_excel("Datos_LP.xlsx",
col_names = FALSE,
na = "NA",
range = "D3:DN3")
# Limpia NA en los nombres (reemplazándolos con "col_X")
nombres_columnas <- ifelse(is.na(tincho),
paste0("col_", seq_along(tincho)),
tincho)
# Asigna los nombres limpios
colnames(datos) <- nombres_columnas
tincho <- colnames(datos)
str(tincho)
# Fijo el dataset
attach(datos)
######################
# Renombrar columnas #
######################
# Lee los datos
tincho <- readxl::read_excel("Datos_LP.xlsx",
col_names = FALSE,
na = "NA",
range = "D3:DN3")
# Limpia NA en los nombres (reemplazándolos con "col_X")
nombres_columnas <- ifelse(is.na(tincho),
paste0("col_", seq_along(tincho)),
tincho)
# Asigna los nombres limpios
colnames(datos) <- nombres_columnas
tincho <- nombres_columnas
str(tincho)
######################
# Renombrar columnas #
######################
# Lee los datos
tincho <- readxl::read_excel("Datos_LP.xlsx",
col_names = FALSE,
na = "NA",
range = "D3:DN3")
str(tincho)
# Cargo los paquetes que voy a usar
library(tidyverse)
library(ggplot2)
# Fijo el dataset
attach(datos_limpios)
datos %>%
mutate( tiempo = factor(tiempo,
levels = 1:5,
labels = c("Menos de 2 años", "Entre 2 y 5 años",
"Entre 5 y 10 años", "Entre 10 y 20 años",
"20 años o más"))) %>%
ggplot() +
#aes(x = tiempo) + # Frecuencias absolutas
aes(x = reorder(tiempo, tiempo, function(x) -length(x))) + # Ordenar según frecuencia
#aes(x = tiempo, y = ..count.. / sum(..count..)) + # Porcentajes
# aes(x = reorder(tiempo, tiempo, function(x) -length(x)),
#		y = ..count.. / sum(..count..)) +  # Porcentajes ordenados según frecuencia
#scale_y_continuous(labels = scales::percent) +    # Eje para porcentajes
geom_bar(width = 0.75,   # Ancho de barras
fill = '#7ed021',  # Color de relleno
col = "black",  # Color de línea
alpha = 0.6) +  # Transparencia
labs(y = "Cantidad de árboles", x = "Tiempo desde la plantación") + # Nombres de ejes
ggtitle("Antigüedad de plantación de los árboles") +
coord_flip() + # Barras horizontales o verticales
theme_classic() # Temas preconfigurados de R https://r-charts.com/ggplot2/themes/
datos_limpios %>%
mutate(
alguna = atracnosis + roya + manchas + ampollas,
ninguna = ifelse(alguna == 0, 1, 0)
) %>%
summarize(atracnosis = sum(atracnosis),
roya = sum(roya),
manchas = sum(manchas),
ampollas = sum(ampollas),
ninguna = sum(ninguna)) %>%
pivot_longer(cols = c(atracnosis, roya, manchas, ampollas, ninguna),
names_to = "plaga",
values_to = "cant") %>%
ggplot(aes(x = plaga,
y = cant)) +
geom_bar(stat = "identity", # Argumento necesario si partimo de una tabla
width = 0.75) +
labs(y = "Cantidad de árboles", x = "Presencia de plagas") +
ggtitle("Antigüedad de plantación de los árboles") +
coord_flip() +
theme_classic() # Temas preconfigurados de R https://r-charts.com/ggplot2/themes/
ggplot(datos) +
aes(x = brotes) +
geom_bar(width = 0.10) +
scale_x_continuous() +
labs(y = "Cantidad de árboles",
x = "Número de brotes nuevos")+
theme_classic()
datos_limpios %>%
# Puedo filtrar en el mismo paso que construyo el gráfico
filter(especie == "Eucalipto") %>%
ggplot() +
aes(x = diametro, y = "") +
geom_boxplot(width = 0.75, fill = "lightgray", outlier.size = 1) +
theme(axis.ticks.y = element_blank()) +
labs(y = "", x = "Diámetro (cm)") +
scale_x_continuous(breaks = seq(0, 250, 50))
# Frecuencias absolutas
ggplot(datos_limpios) +
aes(x = diametro) +
geom_histogram(fill = "lightgray", col = "black",
breaks = seq(0, 250, 20)) +
scale_x_continuous(breaks = seq(0, 250, 20)) +
labs(x = "Diámetro (cm)", y = "Cantidad de árboles")
# Frecuencias relativas
ggplot(datos_limpios) +
aes(x = diametro, y = ..count../sum(..count..)) +
geom_histogram(fill = "lightgray", col = "black",
breaks = seq(0, 250, 20)) +
scale_x_continuous(breaks = seq(0, 250, 20)) +
scale_y_continuous(labels = scales::percent) +
labs(x = "Diámetro (cm)", y = "Cantidad de árboles")
ggplot(datos_limpios) +
aes(x = altura) +
stat_density(bw = 3, # Nivel de suavizado
# El nivel por defecto puede conocerse con bw.nrd0(datos_limpios$altura)
fill = "lightgray", col = "black") +
labs(x = "Altura (m)", y = "Densidad")
str(tincho)
###################
# Modificar datos #
###################
datos_limpios <- datos %>% # Los pipelines permiten encadenar acciones
mutate(   # Para crear nuevas variables y editar las ya existentes
# Veo valores min y max de la variable para elegir una
# particion en intervalos apropiada
# min(altura)
# max(altura)
# sqrt(nrow(datos))
# Creo una variable nueva, con la partición en intervalos de altura
altura_int = cut(altura,
breaks = seq(from=0, to=50, by = 5),
right = F),
# Modifico las columnas de la variable de respuesta múltiple
# para dejarlas como indicadoras con valores 1 (en caso de presentar
# el atributo) y 0 (en caso de no presentarlo)
atracnosis = ifelse( atracnosis == "atracnosis", 1, 0 ),
roya = ifelse( roya == "roya", 1, 0 ),
manchas = ifelse( manchas == "manchas", 1, 0 ),
ampollas = ifelse( ampollas == "ampollas", 1, 0),
# Notar que los NA no entran dentro de la categoría "no presentar
# el atributo", por lo que requieren un tratamiento particular:
atracnosis = ifelse(is.na(atracnosis), 0, 1),
roya = ifelse(is.na(roya), 0, 1),
manchas = ifelse(is.na(manchas), 0, 1),
ampollas = ifelse(is.na(ampollas), 0, 1),
# Esto solo es correcto porque teníamos dos valores posibles en estas
# columnas: presencia de atributo (nombre de la plaga) y ausencia (NA).
# En los casos en los que se presenten ambas categorías además del NA
# correspondería trabajarlos como tres valores distintos (presencia,
# ausencia y faltante) y su tratamiento dependerá de lo que se desee hacer
# Para condiciones ifelse múltiples puedo usar la función case_when
inclinacion_cate = case_when(inclinacion == 0 ~ "Sin inclinación",
inclinacion < 15 ~ "Inclinación leve",
inclinacion < 30 ~ "Inclinación moderada",
TRUE ~ "Inclinación alta"),
# Recodifico las etiquetas de una variable categórica
especie = recode(especie, "ala" = "Álamo",
"casu" = "Casuarina",
"euca" = "Eucalipto",
"jaca" = "Jacarandá",
"palo"  = "Palo borracho"),
# Especifico ordinalidad a las categorías de una variable
tiempo = factor(tiempo,
levels = 1:5,
labels = c("Menos de 2 años", "Entre 2 y 5 años",
"Entre 5 y 10 años", "Entre 10 y 20 años",
"20 años o más"))
)
# Opcion 1
datos_chico1 <- datos_limpios %>%
select(   # Seleccionar las columnas que quiero conservar
id, altura, edad, follaje, inclinacion_cate
)
# Opcion 2
datos_chico2 <- datos_limpios %>%
select(   # Eliminar las columnas que no quiero conservar
-altura, -edad, -follaje, -inclinacion_cate
)
# Opcion 3
datos_orden <- datos_limpios %>%
select(   # Reordeno columnas
id, especie, tiempo, everything()
)
# Opción 1: por criterio
datos_reducido1 <-datos_orden %>%
filter((brotes > 4 & origen == "Nativo/Autóctono") | tiempo == "20 años o más")
# Opción 2: por indexación
datos_reducido2 <-datos_orden %>%
slice(1:500)
str(tincho)
library(readxl)
dataset <- read_excel(NULL)
